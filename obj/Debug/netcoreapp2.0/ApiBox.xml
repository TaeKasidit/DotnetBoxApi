<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiBox</name>
    </assembly>
    <members>
        <member name="M:ApiBox.ApplicationBuilderExtensions.UseDeveloperErrorPages(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds developer friendly error pages for the application which contain extra debug and exception information.
            Note: It is unsafe to use this in production.
            </summary>
        </member>
        <member name="M:ApiBox.ApplicationBuilderExtensions.UseStaticFilesWithCacheControl(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses the static files middleware to serve static files. Also adds the Cache-Control and Pragma HTTP
            headers. The cache duration is controlled from configuration.
            See http://andrewlock.net/adding-cache-control-headers-to-static-files-in-asp-net-core/.
            </summary>
        </member>
        <member name="M:ApiBox.ApplicationBuilderExtensions.UseStrictTransportSecurityHttpHeader(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds the Strict-Transport-Security HTTP header to responses. This HTTP header is only relevant if you are
            using TLS. It ensures that content is loaded over HTTPS and refuses to connect in case of certificate
            errors and warnings.
            See https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security and
            http://www.troyhunt.com/2015/06/understanding-http-strict-transport.html
            Note: Including subdomains and a minimum maxage of 18 weeks is required for preloading.
            Note: You can refer to the following article to clear the HSTS cache in your browser:
            http://classically.me/blogs/how-clear-hsts-settings-major-browsers
            </summary>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Options">
            <summary>
            Returns an Allow HTTP header with the allowed HTTP methods.
            </summary>
            <returns>A 200 OK response.</returns>
            <response code="200">The allowed HTTP methods.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Options(System.Int32)">
            <summary>
            Returns an Allow HTTP header with the allowed HTTP methods for a car with the specified unique identifier.
            </summary>
            <returns>A 200 OK response.</returns>
            <response code="200">The allowed HTTP methods.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Delete(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes the car with the specified ID.
            </summary>
            <param name="carId">The car ID.</param>
            <param name="cancellationToken">The cancellation token used to cancel the HTTP request.</param>
            <returns>A 204 No Content response if the car was deleted or a 404 Not Found if a car with the specified ID
            was not found.</returns>
            <response code="204">The car with the specified ID was deleted.</response>
            <response code="404">A car with the specified ID was not found.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Get(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the car with the specified ID.
            </summary>
            <param name="carId">The car ID.</param>
            <param name="cancellationToken">The cancellation token used to cancel the HTTP request.</param>
            <returns>A 200 OK response containing the car or a 404 Not Found if a car with the specified ID was not
            found.</returns>
            <response code="200">The car with the specified ID.</response>
            <response code="304">The car has not changed since the date given in the If-Modified-Since HTTP header.</response>
            <response code="404">A car with the specified ID could not be found.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.GetPage(ApiBox.ViewModels.PageOptions,System.Threading.CancellationToken)">
            <summary>
            Gets a collection of cars using the specified page number and number of items per page.
            </summary>
            <param name="pageOptions">The page options.</param>
            <param name="cancellationToken">The cancellation token used to cancel the HTTP request.</param>
            <returns>A 200 OK response containing a collection of cars, a 400 Bad Request if the page request
            parameters are invalid or a 404 Not Found if a page with the specified page number was not found.
            </returns>
            <response code="200">A collection of cars for the specified page.</response>
            <response code="400">The page request parameters are invalid.</response>
            <response code="404">A page with the specified page number was not found.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Patch(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ApiBox.ViewModels.SaveCar},System.Threading.CancellationToken)">
            <summary>
            Patches the car with the specified ID.
            </summary>
            <param name="carId">The car ID.</param>
            <param name="patch">The patch document. See http://jsonpatch.com.</param>
            <param name="cancellationToken">The cancellation token used to cancel the HTTP request.</param>
            <returns>A 200 OK if the car was patched, a 400 Bad Request if the patch was invalid or a 404 Not Found
            if a car with the specified ID was not found.</returns>
            <response code="200">The patched car with the specified ID.</response>
            <response code="400">The patch document is invalid.</response>
            <response code="404">A car with the specified ID could not be found.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Post(ApiBox.ViewModels.SaveCar,System.Threading.CancellationToken)">
            <summary>
            Creates a new car.
            </summary>
            <param name="car">The car to create.</param>
            <param name="cancellationToken">The cancellation token used to cancel the HTTP request.</param>
            <returns>A 201 Created response containing the newly created car or a 400 Bad Request if the car is
            invalid.</returns>
            <response code="201">The car was created.</response>
            <response code="400">The car is invalid.</response>
        </member>
        <member name="M:ApiBox.Controllers.CarsController.Put(System.Int32,ApiBox.ViewModels.SaveCar,System.Threading.CancellationToken)">
            <summary>
            Updates an existing car with the specified ID.
            </summary>
            <param name="carId">The car identifier.</param>
            <param name="car">The car to update.</param>
            <param name="cancellationToken">The cancellation token used to cancel the HTTP request.</param>
            <returns>A 200 OK response containing the newly updated car, a 400 Bad Request if the car is invalid or a
            or a 404 Not Found if a car with the specified ID was not found.</returns>
            <response code="200">The car was updated.</response>
            <response code="400">The car is invalid.</response>
            <response code="404">A car with the specified ID could not be found.</response>
        </member>
        <member name="T:ApiBox.Controllers.StatusController">
            <summary>
            The status of this API.
            </summary>
        </member>
        <member name="M:ApiBox.Controllers.StatusController.GetStatus">
            <summary>
            Gets the status of this API and it's dependencies, giving an indication of it's health.
            </summary>
            <returns>A 200 OK or error response containing details of what is wrong.</returns>
            <response code="204">The API is functioning normally.</response>
            <response code="503">The API or one of it's dependencies is not functioning, the service is unavailable.</response>
        </member>
        <member name="T:ApiBox.CustomServiceCollectionExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension methods which extend ASP.NET Core services.
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures caching for the application. Registers the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> and
            <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> types with the services collection or IoC container. The
            <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is intended to be used in cloud hosted scenarios where there is a shared
            cache, which is shared between multiple instances of the application. Use the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>
            otherwise.
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures the settings by binding the contents of the appsettings.json file to the specified Plain Old CLR
            Objects (POCO) and adding <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> objects to the services collection.
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomResponseCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds response compression to enable GZIP compression of responses.
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomRouting(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add custom routing settings which determines how URL's are generated.
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomJsonOptions(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Adds customized JSON serializer settings.
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomCors(Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder)">
            <summary>
            Add cross-origin resource sharing (CORS) services and configures named CORS policies. See
            https://docs.asp.net/en/latest/security/cors.html
            </summary>
        </member>
        <member name="M:ApiBox.CustomServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Swagger services and configures the Swagger services.
            </summary>
        </member>
        <member name="T:ApiBox.KestrelServerOptionsExtensions">
            <summary>
            This class was taken from the ASP.NET Core blog post below but tweaked to match what is coming in ASP.NET Core 2.1.
            See https://blogs.msdn.microsoft.com/webdev/2017/11/29/configuring-https-in-asp-net-core-across-different-platforms/
            </summary>
        </member>
        <member name="T:ApiBox.OperationFilters.CorrelationIdOperationFilter">
            <summary>
            Adds a Swashbuckle <see cref="T:Swashbuckle.AspNetCore.Swagger.NonBodyParameter"/> to all operations with a description of the X-Correlation-ID
            HTTP header and a default GUID value.
            </summary>
            <seealso cref="T:Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter" />
        </member>
        <member name="M:ApiBox.OperationFilters.CorrelationIdOperationFilter.Apply(Swashbuckle.AspNetCore.Swagger.Operation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:ApiBox.Options.ApplicationOptions">
            <summary>
            All options for the application.
            </summary>
        </member>
        <member name="T:ApiBox.Options.CacheProfileOptions">
            <summary>
            The caching options for the application.
            </summary>
        </member>
        <member name="T:ApiBox.Options.CompressionOptions">
            <summary>
            The GZIP response compression options for the application.
            </summary>
        </member>
        <member name="P:ApiBox.Options.CompressionOptions.MimeTypes">
            <summary>
            Gets or sets a list of MIME types to be compressed in addition to the default set used by ASP.NET Core.
            </summary>
        </member>
        <member name="T:ApiBox.ProjectServiceCollectionExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension methods add project services.
            </summary>
            <remarks>
            AddSingleton - Only one instance is ever created and returned.
            AddScoped - A new instance is created and returned for each request/response cycle.
            AddTransient - A new instance is created and returned each time.
            </remarks>
        </member>
        <member name="T:ApiBox.Services.ClockService">
            <summary>
            Retrieves the current date and/or time. Helps with unit testing by letting you mock the system clock.
            </summary>
        </member>
        <member name="T:ApiBox.Services.IClockService">
            <summary>
            Retrieves the current date and/or time. Helps with unit testing by letting you mock the system clock.
            </summary>
        </member>
        <member name="T:ApiBox.Startup">
            <summary>
            The main start-up class for the application.
            </summary>
        </member>
        <member name="M:ApiBox.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ApiBox.Startup"/> class.
            </summary>
            <param name="configuration">The application configuration, where key value pair settings are stored. See
            http://docs.asp.net/en/latest/fundamentals/configuration.html</param>
            <param name="hostingEnvironment">The environment the application is running under. This can be Development,
            Staging or Production by default. See http://docs.asp.net/en/latest/fundamentals/environments.html</param>
        </member>
        <member name="M:ApiBox.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services to add to the ASP.NET Core Injection of Control (IoC) container. This method gets
            called by the ASP.NET runtime. See
            http://blogs.msdn.com/b/webdev/archive/2014/06/17/dependency-injection-in-asp-net-vnext.aspx
            </summary>
        </member>
        <member name="M:ApiBox.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures the application and HTTP request pipeline. Configure is called after ConfigureServices is
            called by the ASP.NET runtime.
            </summary>
        </member>
    </members>
</doc>
